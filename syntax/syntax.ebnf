(* Types *)

type ::= 'type' type_id '=' complex_type;

primitives_type ::= 'Boolean' | 'Int' | 'Float' | 'Char' | 'String';

type ::= primitives_type | type_id;

complex_type ::= ListType | TupleType | FunctionType | ObjectType;

ListType ::= '[' type ']';

TupleType ::= '(' type (',' type)* ')';

FunctionType ::= (type '->')+ type;

ObjectType ::= '{' (val_id ':' type) (',' val_id ':' type)* '}';

type_id ::= [A-Z]+[a-zA-Z0-9]*;

val_id ::= [a-zA-Z]+[a-zA-Z0-9]*;

(* Type Literals *)

Boolean ::= 'True' | 'False';

Int ::= sign?[0-9]+;

Float ::= sign?[0-9]+.[0-9]+;

Char ::= "'"[http://www.w3.org/TR/xml#NT-Char]"'";

String ::= '"' [http://www.w3.org/TR/xml#NT-Char]* '"';

primitive_literal ::= Boolean | Int | Float | Char | String;

complex_literal ::= List | Tuple | FunctionLiteral | Object;

numeric_literal ::= Float | Int;

literal ::= primitive_literal | complex_literal;

List ::= '[' expression (',' expression)* ']';

Tuple ::= '(' expression (',' expression)* ')';

FunctionLiteral ::= '('(val_id ':' type) (',' (val_id ':' type))* ')' '->' block;

Object ::= '{' (val_id ':' expression) (',' val_id ':' expression)* '}';

(* Operators *)

(* Logical Operators *)

logical_operator ::= '&&' | '||';
not_operator ::= '!';

(* Relational Operators *)

eq_or_not_equal_operator ::= '==' | '!=';
numerical_relational_operator ::= '<' | '>' | '<=' | '>=';

(* Arithmetic Operators *)

arithmetic_operator ::= '+' | '-' | '*' | '/' | '%';

sign ::= '+' | '-';

(* Expressions *)

boolean_expression ::= 
    Boolean | 
    val_id |
    '(' boolean_expression ')' |
    not_operator boolean_expression |
    (boolean_expression  (eq_or_not_equal_operator | logical_operator) boolean_expression) | 
    (arithmetic_expression  (eq_or_not_equal_operator | numerical_relational_operator) arithmetic_expression) |
    (char_expression eq_or_not_equal_operator char_expression)
    ;

arithmetic_expression ::= 
    numeric_literal | 
    val_id |
    '(' arithmetic_expression ')' | 
    (arithmetic_expression arithmetic_operator arithmetic_expression);

char_expression ::= Char | String | val_id;

access_collection_expression ::= (val_id | List | Tuple)'['[0-9]+']';
access_object_property_expression ::= (Object | val_id)'.'val_id;

expression ::= 
    literal | 
    val_id | 
    boolean_expression | 
    arithmetic_expression | 
    function_call | 
    conditional_expression | 
    access_collection_expression |
    access_object_property_expression;

(* if else *)
conditional_expression ::= 'if' conditional_expression_body;
conditional_expression_body ::= boolean_expression '?' block ':' (conditional_expression_body | block);

(* Declarations *)
variable_declaration ::= 'val' val_id ':' type '=' expression;
function_header ::= val_id ':' (type '->')+ type;
function_body ::= val_id (val_id)+ '=' block;
function_call ::= '(' val_id expression expression* ')';

block ::= '{' (variable_declaration | io)* expression '}';

io ::= '(' 'print' expression expression* ')';

main ::=(variable_declaration | (function_header function_body) | expression | io)*;



first ::= '+' | '-';
second ::= '*' | '/' |Â '%';

exp ::= fact (first fact)*;
fact ::= operand (second operand)* ;
operand ::= numeric_literal | val_id;
